var Main,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(document).ready(function() {
  return new Main();
});

Main = (function() {
  var _camera, _daeLoader, _objLoader, _renderer, _scene, _stats;

  Main.prototype._main = null;

  _camera = null;

  _scene = null;

  _renderer = null;

  _stats = null;

  _daeLoader = null;

  _objLoader = null;

  function Main() {
    this._dropHandler = __bind(this._dropHandler, this);
    this._animate = __bind(this._animate, this);    this._main = document.getElementById("main");
    this._camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 2000);
    this._camera.position.set(2, 2, 3);
    this._camera.aspect = window.innerWidth / window.innerHeight;
    this._camera.updateProjectionMatrix();
    this._scene = new THREE.Scene();
    this._createGrid();
    this._scene.add(new THREE.AmbientLight(0xcccccc));
    this._renderer = new THREE.WebGLRenderer();
    this._renderer.setSize(window.innerWidth, window.innerHeight);
    this._main.appendChild(this._renderer.domElement);
    this._stats = new Stats();
    this._stats.domElement.style.position = "absolute";
    this._stats.domElement.style.top = 0;
    this._main.appendChild(this._stats.domElement);
    this._animate();
    main.addEventListener("drop", this._dropHandler, false);
  }

  Main.prototype._createGrid = function() {
    var geometry, i, line, material, size, x, _i, _ref;

    geometry = new THREE.Geometry();
    material = new THREE.LineBasicMaterial({
      color: 0x303030
    });
    size = 14;
    x = -size - 1;
    for (i = _i = 0, _ref = size * 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      x += 1;
      geometry.vertices.push(new THREE.Vector3(-size, -0.04, x));
      geometry.vertices.push(new THREE.Vector3(size, -0.04, x));
      geometry.vertices.push(new THREE.Vector3(x, -0.04, -size));
      geometry.vertices.push(new THREE.Vector3(x, -0.04, size));
    }
    line = new THREE.Line(geometry, material, THREE.LinePieces);
    return this._scene.add(line);
  };

  Main.prototype._animate = function() {
    requestAnimationFrame(this._animate);
    this._render();
    return this._stats.update();
  };

  Main.prototype._render = function() {
    var timer;

    timer = Date.now() * .0005;
    this._camera.position.x = Math.sin(timer * 4) * 3009;
    this._camera.position.y = Math.cos(timer * 5) * 4000;
    this._camera.position.z = Math.cos(timer * 4) * 3009;
    this._camera.lookAt(this._scene.position);
    return this._renderer.render(this._scene, this._camera);
  };

  Main.prototype._dropHandler = function(e) {
    return console.log(e.dataTransfer.files);
  };

  return Main;

})();
