var DropSplash, DropSplashs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DropSplashs = (function() {
  DropSplashs._POSITIONS = [
    {
      x: 0,
      y: 0
    }, {
      x: 0,
      y: 0
    }
  ];

  DropSplashs.prototype._cnt = null;

  DropSplashs.prototype._splashs = null;

  DropSplashs.prototype._timeout = 0;

  DropSplashs.prototype._rafId = 0;

  function DropSplashs() {
    this._update = __bind(this._update, this);
    this._createSplash = __bind(this._createSplash, this);
    this._cnt = document.getElementById("splash");
    this._splashs = [];
  }

  DropSplashs.prototype.start = function() {
    this._startTimer();
    return this._update();
  };

  DropSplashs.prototype._startTimer = function() {
    return this._timeout = setTimeout(this._createSplash, 1000 + Math.random() * 2000);
  };

  DropSplashs.prototype._createSplash = function() {
    var splash;
    splash = new DropSplash();
    this._splashs.push(splash);
    this._cnt.appendChild(splash.body);
    return this._startTimer();
  };

  DropSplashs.prototype._update = function() {
    var i, splash;
    i = this._splashs.length;
    while (--i > -1) {
      splash = this._splashs[i];
      splash.update();
      if (splash.isDead) {
        this._cnt.removeChild(splash.body);
        this._splashs.splice(i, 1);
      }
    }
    return this._rafId = requestAnimationFrame(this._update);
  };

  DropSplashs.prototype.stop = function() {
    return this._stopTimer();
  };

  DropSplashs.prototype._stopTimer = function() {
    return clearTimeout(this._timeout);
  };

  return DropSplashs;

})();

DropSplash = (function() {
  DropSplash._BASE_CLASS_NAME = "splash sprite ";

  DropSplash._SPRITE_COUNT = 28;

  DropSplash.prototype.body = null;

  DropSplash.prototype._currentSpriteCount = 0;

  DropSplash.prototype._separateCount = 0;

  DropSplash.prototype.isDead = false;

  function DropSplash() {
    this.body = document.createElement("span");
    this._updateClass();
  }

  DropSplash.prototype.update = function() {
    this._currentSpriteCount++;
    return this._updateClass();
  };

  DropSplash.prototype._updateClass = function() {
    var count0;
    count0 = "000";
    if (this._currentSpriteCount < 10) {
      count0 += "0";
    }
    count0 += this._currentSpriteCount;
    if (this._currentSpriteCount > 27) {
      this.isDead = true;
      return;
    }
    this.body.className = DropSplash._BASE_CLASS_NAME + ("drop_splash--" + count0);
    this._separateCount++;
    if (this._separateCount === 32) {
      this._separateCount = 0;
      return this._currentSpriteCount++;
    }
  };

  return DropSplash;

})();

var Raindrop, Raindrops,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Raindrops = (function() {
  Raindrops.prototype._canvas = null;

  Raindrops.prototype._ctx = null;

  Raindrops.prototype._drops = null;

  Raindrops.prototype._timeout = 0;

  Raindrops.prototype._rafId = 0;

  function Raindrops() {
    this._update = __bind(this._update, this);
    this._createRaindrop = __bind(this._createRaindrop, this);
    this._canvas = document.getElementById("#raindrop");
    this._ctx = this._canvas.getContext("2d");
    this._drops = [];
  }

  Raindrops.prototype.start = function() {
    this._startTimer();
    return this._update();
  };

  Raindrops.prototype.stop = function() {
    this._stopTimer();
    return cancelAnimationFrame(this._rafId);
  };

  Raindrops.prototype._startTimer = function() {
    return this._timeout = setTimeout(this._createRaindrop, 100 + Math.random() * 500);
  };

  Raindrops.prototype._stopTimer = function() {
    return clearTimeout(this._timeout);
  };

  Raindrops.prototype._createRaindrop = function() {
    var count, drop, i, _i;
    count = Math.floor(Math.random() * 4 + 2);
    for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
      drop = new Raindrop();
      this._drops.push(drop);
    }
    return this._startTimer();
  };

  Raindrops.prototype._update = function() {
    var drop, i;
    i = this._drops.length;
    while (--i > -1) {
      drop = this._drops[i];
      drop.update();
      if (drop.body.offsetTop > window.innerHeight) {
        this._drops.splice(i, 1);
      }
    }
    return this._rafId = requestAnimationFrame(this._update);
  };

  return Raindrops;

})();

Raindrop = (function() {
  Raindrop.prototype.x = 0.0;

  Raindrop.prototype.y = 0.0;

  Raindrop.prototype.w = 0.0;

  Raindrop.prototype.h = 0.0;

  Raindrop.prototype._size = 0.0;

  Raindrop.prototype._heightMax = 0.0;

  Raindrop.prototype._speed = 2.0;

  Raindrop.prototype._speedMax = 0.0;

  function Raindrop() {
    this._heightMax = 50.0 + Math.random() * 200.0;
    this._speedMax = 8.0 + Math.random() * 14.0;
  }

  Raindrop.prototype.update = function() {
    this.h += (this._heightMax - this.h) * .03;
    this._speed += (this._speedMax - this._speed) * .1;
    return this.y += this._speed;
  };

  return Raindrop;

})();

var Main,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Main = (function() {
  Main.prototype._raindrops = null;

  Main.prototype._lightBubbles = null;

  Main.prototype._dropSplashs = null;

  function Main() {
    this._onFocusLost = __bind(this._onFocusLost, this);
    this._onFocusGain = __bind(this._onFocusGain, this);
    var $window;
    this._raindrops = new Raindrops();
    this._raindrops.start();
    $window = $(window);
    $window.focus(this._onFocusGain);
    $window.blur(this._onFocusLost);
  }

  Main.prototype._onFocusGain = function() {
    return this._raindrops.start();
  };

  Main.prototype._onFocusLost = function() {
    return this._raindrops.stop();
  };

  return Main;

})();

new Main();
